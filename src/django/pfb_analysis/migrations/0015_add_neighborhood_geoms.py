# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-04-12 14:03
from __future__ import unicode_literals

from builtins import next
from builtins import str
import json
import logging
import os
import shutil
import tempfile
import zipfile

import fiona

from django.contrib.gis.geos import GEOSGeometry, MultiPolygon
from django.db import migrations


logger = logging.getLogger(__name__)


def geom_from_boundary_file(boundary_file):
    """ Opens a local copy of the boundary file and sets geom field

    Mostly copied from Neighborhood._set_geom_from_boundary_file because we don't have
    access to model methods here

    Does not save model
    Copies the geom of the first feature found in the shapefile into geom, to be consistent
    with the rest of the app
    No explicit error handling/logging, will raise original exception if failure

    """
    geom = None
    try:
        tmpdir = tempfile.mkdtemp()
        local_zipfile = os.path.join(tmpdir, 'neighborhood.zip')
        with open(local_zipfile, 'wb') as zip_handle:
            zip_handle.write(boundary_file.read())
        with zipfile.ZipFile(local_zipfile, 'r') as zip_handle:
            zip_handle.extractall(tmpdir)
        shpfiles = [filename for filename in os.listdir(tmpdir) if filename.endswith('shp')]
        shp_filename = os.path.join(tmpdir, shpfiles[0])
        with fiona.open(shp_filename, 'r') as shp_handle:
            feature = next(shp_handle)
            geom = GEOSGeometry(json.dumps(feature['geometry']))
            if geom.geom_type == 'Polygon':
                geom = MultiPolygon([geom])
    except:
        geom = None
        logger.exception('ERROR: {}'.format(str(boundary_file)))
    finally:
        shutil.rmtree(tmpdir, ignore_errors=True)
    return geom


def add_neighborhood_geoms(apps, schema_editor):
    Neighborhood = apps.get_model("pfb_analysis", "Neighborhood")
    for n in Neighborhood.objects.all():
        n.geom = geom_from_boundary_file(n.boundary_file)
        n.save()


class Migration(migrations.Migration):

    dependencies = [
        ('pfb_analysis', '0014_neighborhood_geom'),
    ]

    operations = [
        migrations.RunPython(add_neighborhood_geoms)
    ]
